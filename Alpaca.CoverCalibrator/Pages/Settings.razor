@page "/setup"

<AuthorizeView>
    <Authorized>

        <fieldset>
            <legend>Server Settings</legend>
            <p>Version @ServerVersion</p>
            <div class="grid-container-two">
                <div class="grid-item-right">
                    <span>Server Location:</span>
                </div>
                <div class="grid-item-left">
                    <input type="text" @bind="Location" style="width:21ch;">
                </div>
                <div class="grid-item-right">
                    <span>Allow Remote Access:</span>
                </div>
                <div class="grid-item-left">
                    <input type="checkbox" @bind="RemoteAccess">
                </div>

                <div class="grid-item-right">
                    <span>Server (Alpaca) Port:</span>
                </div>
                <div class="grid-item-left">
                    <input type="number" @bind="ServerPort" min="1" max="65535" style="width:20ch;">
                </div>

                <div class="grid-item-right">
                    <span>Open Browser on Start:</span>
                </div>
                <div class="grid-item-left">
                    <input type="checkbox" @bind="StartBrowser">
                </div>

                <div class="grid-item-right">
                </div>
                <div class="grid-item-right">
                    <button @onclick="SaveServerSettings" style="min-width:12ch; vertical-align:middle;">Save</button>
                </div>
            </div>
        </fieldset>

        <fieldset>
            <legend>Bound Addresses</legend>

            <p>Addresses bound at startup. * or + means all available interfaces.</p>

            @foreach (var address in Startup.Addresses)
            {
                <p>@address</p>
            }
        </fieldset>

        <fieldset>
            <legend>Driver Settings</legend>
            <div class="grid-container-two">
                <div class="grid-item-right">
                    <span>Prevent Disconnects:</span>
                </div>
                <div class="grid-item-left">
                    <input type="checkbox" @bind="PreventRemoteDisconnects">
                </div>
                <div class="grid-item-right">
                    <span>Prevent Disposes:</span>
                </div>
                <div class="grid-item-left">
                    <input type="checkbox" @bind="PreventRemoteDisposes">
                </div>
                <div class="grid-item-right">
                </div>
                <div class="grid-item-right">
                    <button @onclick="SaveDriverSettings" style="min-width:12ch; vertical-align:middle;">Save</button>
                </div>
            </div>
        </fieldset>

        <fieldset>
            <legend>Alpaca Discovery Settings</legend>
            <div class="grid-container-two">
                <div class="grid-item-right">
                    <span>Allow Discovery:</span>
                </div>
                <div class="grid-item-left">
                    <input type="checkbox" @bind="Discovery">
                </div>

                <div class="grid-item-right">
                    <span>Discovery Port:</span>
                </div>
                <div class="grid-item-left">
                    <input type="number" @bind="DiscoveryPort" min="1" max="65535" style="width:20ch;">
                </div>

                <div class="grid-item-right">
                    <span>Respond to localhost on loopback only:</span>
                </div>
                <div class="grid-item-left">
                    <input type="checkbox" @bind="LocalHostOnlyOnHost">
                </div>

                <div class="grid-item-right">
                </div>
                <div class="grid-item-right">
                    <button @onclick="SaveDiscovery" style="min-width:12ch; vertical-align:middle;">Save</button>
                </div>
            </div>
        </fieldset>

        <fieldset>
            <legend>Shutdown Alpaca Server</legend>
            <div class="grid-container-two">
                <div class="grid-item-right">
                    <span>Shutdown:</span>
                </div>
                <div class="grid-item-left">
                    <input type="checkbox"
                           @bind="EnableShutdown">
                    <button @onclick="Shutdown" style="min-width:12ch; vertical-align:middle;" disabled="@AllowShutdown">Shutdown</button>
                </div>
            </div>
        </fieldset>
    </Authorized>
</AuthorizeView>

@code {

    bool Discovery
    {
        get;
        set;
    } = true;

    UInt16 DiscoveryPort
    {
        get;
        set;
    } = 32227;

    bool LocalHostOnlyOnHost
    {
        get;
        set;
    } = true;

    bool RemoteAccess
    {
        get;
        set;
    } = true;

    UInt16 ServerPort
    {
        get;
        set;
    } = 5000;

    bool StartBrowser
    {
        get;
        set;
    } = true;

    bool EnableShutdown
    {
        get;
        set;
    } = false;

    string Location
    {
        get;
        set;
    }

    bool AllowShutdown
    {
        get
        {
            return !EnableShutdown;
        }
    }

    bool PreventRemoteDisconnects
    {
        get;
        set;
    }

    bool PreventRemoteDisposes
    {
        get;
        set;
    }

    protected override void OnInitialized()
    {
        Discovery = ServerSettings.AllowDiscovery;

        DiscoveryPort = ServerSettings.DiscoveryPort;

        LocalHostOnlyOnHost = ServerSettings.LocalRespondOnlyToLocalHost;

        RemoteAccess = ServerSettings.AllowRemoteAccess;

        ServerPort = ServerSettings.ServerPort;

        StartBrowser = ServerSettings.AutoStartBrowser;

        Location = ServerSettings.Location;

        PreventRemoteDisconnects = ServerSettings.PreventRemoteDisconnects;

        PreventRemoteDisposes = ServerSettings.PreventRemoteDisposes;
    }

    void SaveDiscovery()
    {
        try
        {
            ServerSettings.AllowDiscovery = Discovery;

            ServerSettings.DiscoveryPort = DiscoveryPort;

            ServerSettings.LocalRespondOnlyToLocalHost = LocalHostOnlyOnHost;
        }
        catch (Exception ex)
        {
            DisplayError(ex.Message);
        }
    }

    void SaveServerSettings()
    {
        try
        {
            bool SettingsChanged = false;

            if (ServerSettings.AllowRemoteAccess != RemoteAccess)
            {
                ServerSettings.AllowRemoteAccess = RemoteAccess;
                SettingsChanged = true;
            }

            if (ServerSettings.ServerPort != ServerPort)
            {
                ServerSettings.ServerPort = ServerPort;
                SettingsChanged = true;
            }

            ServerSettings.Location = Location;

            ServerSettings.AutoStartBrowser = StartBrowser;

            if (SettingsChanged) //If any core settings change call a restart.
            {
                Program.Main(null);
            }

        }
        catch (Exception ex)
        {
            DisplayError(ex.Message);
        }
    }

    void SaveDriverSettings()
    {
        try
        {
            ServerSettings.PreventRemoteDisconnects = PreventRemoteDisconnects;
            ServerSettings.PreventRemoteDisposes = PreventRemoteDisposes;

        }
        catch (Exception ex)
        {
            DisplayError(ex.Message);
        }
    }

    void SaveSecuritySettings()
    {
        //write and add the library
    }

    void Shutdown()
    {
        try
        {
            Startup.Lifetime.StopApplication();
        }
        catch (Exception ex)
        {
            DisplayError(ex.Message);
        }
    }

    public void DisplayError(string message)
    {
    }

    public void DisplaySuccess(string message)
    {
    }

    string ServerVersion
    {
        get
        {
            return System.Reflection.Assembly.GetExecutingAssembly().GetName().Version.ToString(3);
        }
    }
}