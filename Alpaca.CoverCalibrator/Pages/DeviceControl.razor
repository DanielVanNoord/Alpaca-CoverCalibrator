@page "/control"
@page "/control/{InstanceID:int}"

@implements IDisposable

@using System.Timers;

<body>
    <fieldset>
        <legend>Cover Calibrator</legend>
        d
        <div class="grid-container-two">

            <div class="grid-item-left">
                <svg width="30" height="30">
                    <circle cx="15" cy="15" r="11" style="fill:@ConnectionColor;stroke-width:3;stroke:rgb(0,0,0)" />
                </svg>
                <button @onclick="Connect">@ConnectText</button>
            </div>
            <div class="grid-item-left">

            </div>
        </div>

        <div class="grid-container-one">
            <div class="grid-item-center">
                <p>Calibrator Status: @CalStatus</p>
            </div>
            <div class="grid-item-center">
                <svg width="128" height="128">
                    <rect width="128" height="128" style="fill:@BrightnessString;stroke-width:3;stroke:rgb(0,0,0)" />
                </svg>
            </div>
            <div class="grid-item-center">
                <input type="range" min="0" max="@MaxBrightness" step="1" disabled="@CalibratorDisabled" @bind-value="Brightness" />
            </div>

            <div class="grid-item-center">
                <label for="brightness">Brightness:</label>
                <input type="number" id="brightness" name="brightness" min="0" max="@MaxBrightness" @bind-value="Brightness" disabled="@CalibratorDisabled">
            </div>

            <div class="grid-item-center">
                <button @onclick="CalOff" disabled="@CalibratorDisabled">Calibrator Off</button>
            </div>

            <div class="grid-item-center">
                <p>Cover Status: @CoverStatus</p>
            </div>
        </div>
    </fieldset>

</body>

@code {
    [Parameter]
    public int InstanceID { get; set; } = 0;

    Timer timer = new Timer(100);

    public void Dispose()
    {
        timer.Elapsed -= OnPageRefresh;
        timer.Stop();
    }

    protected override void OnInitialized()
    {
        timer.Elapsed += OnPageRefresh;
        timer.AutoReset = true;
        timer.Enabled = true;
        base.OnInitialized();
    }

    private void OnPageRefresh(Object source, ElapsedEventArgs e)
    {
        try
        {
            // Note that the following line is necessary because otherwise
            // Blazor would not recognize the state change and not refresh the UI
            InvokeAsync(() =>
            {
                try
                {
                    StateHasChanged();
                }
                catch
                {

                }
            });
        }
        catch
        {

        }
    }

    public int MaxBrightness
    {
        get
        {
            if (!CalibratorDisabled)
            {
                return DeviceManager.coverCalibrator.MaxBrightnessValue;
            }
            return 0;
        }
    }

    public string BrightnessString
    {
        get
        {
            var hex = EightBitBrightness.ToString("X2");
            return string.Format("#{0}{0}{0}", hex);
        }
    }

    public int EightBitBrightness
    {
        get
        {
            if (!CalibratorDisabled)
            {
                return (Brightness * 255) / DeviceManager.coverCalibrator.MaxBrightness;
            }
            return 0;
        }
    }

    public int Brightness
    {
        get
        {
            if (!CalibratorDisabled)
            {
                return DeviceManager.coverCalibrator.Brightness;
            }
            return 0;
        }
        set
        {
            if (!CalibratorDisabled)
            {
                try
                {
                    DeviceManager.coverCalibrator.CalibratorOn(value);
                }
                catch(Exception ex)
                {
                    DisplayError(ex.Message);
                }
            }
        }
    }

    public ASCOM.Standard.Interfaces.CalibratorStatus CalStatus
    {
        get
        {
            return DeviceManager.coverCalibrator.CalibratorState;
        }
    }

    public double OpeningTime
    {
        get
        {
            return DeviceManager.coverCalibrator.CoverOpeningTimeValue;
        }
    }

    public ASCOM.Standard.Interfaces.CoverStatus CoverStatus
    {
        get
        {
            return DeviceManager.coverCalibrator.CoverState;
        }
    }

    public bool CalibratorDisabled
    {
        get
        {
            if (!Connected)
            {
                return true;
            }
            if (CalStatus == ASCOM.Standard.Interfaces.CalibratorStatus.NotPresent)
            {
                return true;
            }
            return false;
        }
    }

    public bool Connected
    {
        get
        {
            return DeviceManager.coverCalibrator.Connected;
        }
    }

    public string ConnectionColor
    {
        get
        {
            if (Connected)
            {
                return "red";
            }
            return "gray";
        }
    }

    public string ConnectText
    {
        get
        {
            if (DeviceManager.coverCalibrator.Connected)
            {
                return "Disconnect";
            }
            return "Connect";
        }
    }

    public void Connect()
    {
        DeviceManager.coverCalibrator.Connected = !DeviceManager.coverCalibrator.Connected;
    }

    public void CalOff()
    {
        try
        {
            DeviceManager.coverCalibrator.CalibratorOff();
        }
        catch(Exception ex)
        {
            DisplayError(ex.Message);
        }
    }

    public void DisplayError(string error)
    {
    }
}